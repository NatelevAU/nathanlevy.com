name: Frontend Pipeline

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/**/*'
      - 'public/**/*'
      - 'package.json'
      - 'package-lock.json'
      - '.eslintignore'
      - '.eslintrc.js'
      - '.github/workflows/*.yml'
      - '.prettierignore'
      - '.prettierrc'

env:
  PROD_BRANCH: 'main'
  DEV_BRANCH: 'dev'
  NODE_VERSION: '18'

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci

  lint:
    needs: install_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Lint codebase
        run: |
          npm run lint

  test:
    needs: install_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run tests
        run: |
          npm test

  security_scan:
    needs: install_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Run security scan
        run: |
          npm audit

  build:
    needs: [lint, test, security_scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Build application
        run: |
          npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build/
      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/${{ env.PROD_BRANCH }}" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/${{ env.DEV_BRANCH }}" ]]; then
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          fi
      - name: Deploy to ${{ env.DEPLOY_ENV }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_HOSTNAME: ${{ vars.DEPLOY_HOSTNAME }}
          APP_NAME: ${{ vars.APP_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOSTNAME >> ~/.ssh/known_hosts

          if [[ "$DEPLOY_ENV" == "production" ]]; then
            RELEASE_BASE="/var/www/$APP_NAME"
          else
            RELEASE_BASE="/var/www/dev-$APP_NAME"
          fi

          RELEASE_PATH="${RELEASE_BASE}/releases/${{ github.sha }}"

          rsync -avz -e "ssh -i ~/.ssh/deploy_key" --delete build/ deploy@$DEPLOY_HOSTNAME:${RELEASE_PATH}
          ssh -i ~/.ssh/deploy_key deploy@$DEPLOY_HOSTNAME "ln -snf ${RELEASE_PATH} ${RELEASE_BASE}/current"

  cleanup_releases:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old releases
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_HOSTNAME: ${{ vars.DEPLOY_HOSTNAME }}
          APP_NAME: ${{ vars.APP_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOSTNAME >> ~/.ssh/known_hosts

          if [[ "${{ github.ref }}" == "refs/heads/${{ env.PROD_BRANCH }}" ]]; then
            RELEASE_BASE="/var/www/$APP_NAME"
          elif [[ "${{ github.ref }}" == "refs/heads/${{ env.DEV_BRANCH }}" ]]; then
            RELEASE_BASE="/var/www/dev-$APP_NAME"
          fi

          ssh -i ~/.ssh/deploy_key deploy@$DEPLOY_HOSTNAME "cd ${RELEASE_BASE}/releases && ls -1t | tail -n +6 | xargs -I {} rm -rf {}"
